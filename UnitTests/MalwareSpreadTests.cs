using Problems;
using Xunit;

namespace UnitTests
{
    public class MalwareSpreadTests
    {
        [Fact]
        public void Spreader_1_case_0()
        {
            var graph = new int[3][];
            graph[0] = new[] {1, 1, 0};
            graph[1] = new[] {1, 1, 0};
            graph[2] = new[] {0, 0, 1};
            
            var spreader = new MalwareSpreadOne();
            Assert.Equal(0, spreader.MinMalwareSpread(graph, new []{0,1}));
        }
        
        [Fact]
        public void Spreader_1_case_1()
        {
            var graph = new int[3][];
            graph[0] = new[] {1, 0, 0};
            graph[1] = new[] {0, 1, 0};
            graph[2] = new[] {0, 0, 1};
            
            var spreader = new MalwareSpreadOne();
            Assert.Equal(0, spreader.MinMalwareSpread(graph, new []{0,2}));
        }
        
        [Fact]
        public void Spreader_1_case_2()
        {
            var graph = new int[3][];
            graph[0] = new[] {1, 1, 1};
            graph[1] = new[] {1, 1, 1};
            graph[2] = new[] {1, 1, 1};
            
            var spreader = new MalwareSpreadOne();
            Assert.Equal(1, spreader.MinMalwareSpread(graph, new []{1,2}));
        }
        
        [Fact]
        public void Spreader_1_case_3()
        {
            var graph = new int[4][];
            graph[0] = new[] {1,0,0,0};
            graph[1] = new[] {0,1,0,0};
            graph[2] = new[] {0,0,1,1};
            graph[3] = new[] {0,0,1,1};
            
            var spreader = new MalwareSpreadOne();
            Assert.Equal(3, spreader.MinMalwareSpread(graph, new []{3,1}));
        }
    }
}